import tensorflow as tf
from tensorflow.keras.preprocessing import image_dataset_from_directory
from PIL import Image, UnidentifiedImageError
import os

# Define the path to your dataset
dataset_path = 'D:/extracted_fire_dataset'

def clean_corrupted_images(directory):
    corrupted_files = []
    for subdir, _, files in os.walk(directory):
        for file in files:
            file_path = os.path.join(subdir, file)
            try:
                with Image.open(file_path) as img:
                    img.verify()  # Verify that the image is not corrupted
                    img_format = img.format.lower()
                    if img_format not in {'jpeg', 'png'}:
                        raise UnidentifiedImageError(f"Unsupported image format: {img_format}")
            except (IOError, SyntaxError, UnidentifiedImageError) as e:
                print(f"Removing corrupted or invalid image: {file_path}")
                os.remove(file_path)
                corrupted_files.append(file_path)
    return corrupted_files

# Clean corrupted images
corrupted_files = clean_corrupted_images(dataset_path)
print(f"Corrupted files removed: {len(corrupted_files)}")

# Load and preprocess the dataset
batch_size = 32
img_height = 180
img_width = 180

train_ds = image_dataset_from_directory(
    dataset_path,
    validation_split=0.2,
    subset="training",
    seed=123,
    image_size=(img_height, img_width),
    batch_size=batch_size
)

val_ds = image_dataset_from_directory(
    dataset_path,
    validation_split=0.2,
    subset="validation",
    seed=123,
    image_size=(img_height, img_width),
    batch_size=batch_size
)

# Model definition
model = tf.keras.Sequential([
    tf.keras.layers.Rescaling(1./255, input_shape=(img_height, img_width, 3)),
    tf.keras.layers.Conv2D(16, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Conv2D(32, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(2, activation='softmax')
])

model.compile(
    optimizer='adam',
    loss='sparse_categorical_crossentropy',
    metrics=['accuracy']
)

# Model training
epochs = 10

history = model.fit(
    train_ds,
    validation_data=val_ds,
    epochs=epochs
)

# Summary
print(f"Training completed with {len(corrupted_files)} corrupted files removed.")
